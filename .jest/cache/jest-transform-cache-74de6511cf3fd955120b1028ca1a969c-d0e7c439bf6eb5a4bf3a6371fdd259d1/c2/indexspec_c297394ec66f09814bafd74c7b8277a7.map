{"version":3,"sources":["index.spec.js"],"names":["randomstring","require","username","generate","email","password","describe","it","cy","visit","get","contains","click","should","server","route","as","type","wait"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA5B;;AAEA,MAAMC,QAAQ,GAAGF,YAAY,CAACG,QAAb,EAAjB;AACA,MAAMC,KAAK,GAAI,GAAEF,QAAS,WAA1B;AACA,MAAMG,QAAQ,GAAG,eAAjB;AAEAC,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,EAAAA,EAAE,CAAC,8DAAD,EAAiE,MAAM;AACvEC,IAAAA,EAAE,CAACC,KAAH,CAAS,GAAT,EACGC,GADH,CACO,IADP,EAEGC,QAFH,CAEY,WAFZ,EAGGD,GAHH,CAGO,gBAHP,EAIGE,KAJH,GAKGF,GALH,CAKO,GALP,EAMGC,QANH,CAMY,aANZ,EAOGE,MAPH,CAOU,gBAPV,EAQGH,GARH,CAQO,GARP,EASGC,QATH,CASY,SATZ,EAUGE,MAVH,CAUU,gBAVV,EAWGH,GAXH,CAWO,GAXP,EAYGC,QAZH,CAYY,UAZZ,EAaGD,GAbH,CAaO,GAbP,EAcGC,QAdH,CAcY,QAdZ,EAeGD,GAfH,CAeO,GAfP,EAgBGC,QAhBH,CAgBY,SAhBZ,EAiBGD,GAjBH,CAiBO,GAjBP,EAkBGC,QAlBH,CAkBY,OAlBZ,EAmBGD,GAnBH,CAmBO,0BAnBP,EAoBGC,QApBH,CAoBY,sCApBZ,EAqBGD,GArBH,CAqBO,0BArBP,EAsBGG,MAtBH,CAsBU,gBAtBV;AAuBD,GAxBC,CAAF,CADsB,CA2BtB;;AACAN,EAAAA,EAAE,CAAC,2DAAD,EAA8D,MAAM;AACpEC,IAAAA,EAAE,CAACM,MAAH;AACAN,IAAAA,EAAE,CAACO,KAAH,CAAS,MAAT,EAAiB,eAAjB,EAAkCC,EAAlC,CAAqC,YAArC,EAFoE,CAIpE;;AACAR,IAAAA,EAAE,CAACC,KAAH,CAAS,WAAT,EACGC,GADH,CACO,wBADP,EAEGO,IAFH,CAEQf,QAFR,EAGGQ,GAHH,CAGO,qBAHP,EAIGO,IAJH,CAIQb,KAJR,EAKGM,GALH,CAKO,wBALP,EAMGO,IANH,CAMQZ,QANR,EAOGK,GAPH,CAOO,sBAPP,EAQGE,KARH,GASGM,IATH,CASQ,aATR,EALoE,CAgBpE;;AACAV,IAAAA,EAAE,CAACE,GAAH,CAAO,IAAP,EACGC,QADH,CACY,WADZ,EAEGD,GAFH,CAEO,gBAFP,EAGGE,KAHH,GAIGF,GAJH,CAIO,GAJP,EAKGC,QALH,CAKY,aALZ,EAMGD,GANH,CAMO,GANP,EAOGC,QAPH,CAOY,SAPZ,EAQGD,GARH,CAQO,GARP,EASGC,QATH,CASY,UATZ,EAUGE,MAVH,CAUU,gBAVV,EAWGH,GAXH,CAWO,GAXP,EAYGC,QAZH,CAYY,QAZZ,EAaGE,MAbH,CAaU,gBAbV,EAcGH,GAdH,CAcO,GAdP,EAeGC,QAfH,CAeY,SAfZ,EAgBGD,GAhBH,CAgBO,GAhBP,EAiBGC,QAjBH,CAiBY,OAjBZ,EAkBGD,GAlBH,CAkBO,QAlBP,EAmBGC,QAnBH,CAmBY,UAnBZ,EAoBGD,GApBH,CAoBO,0BApBP,EAqBGG,MArBH,CAqBU,gBArBV,EAsBGH,GAtBH,CAsBO,0BAtBP,EAuBGG,MAvBH,CAuBU,gBAvBV;AAwBD,GAzCC,CAAF;AA0CD,CAtEO,CAAR","sourcesContent":["const randomstring = require('randomstring')\n\nconst username = randomstring.generate()\nconst email = `${username}@test.com`\nconst password = 'Cypr3ssT3st!#'\n\ndescribe('Index', () => {\n  it('should display the page correctly if a user is not logged in', () => {\n    cy.visit('/')\n      .get('h1')\n      .contains('Exercises')\n      .get('.navbar-burger')\n      .click()\n      .get('a')\n      .contains('User Status')\n      .should('not.be.visible')\n      .get('a')\n      .contains('Log Out')\n      .should('not.be.visible')\n      .get('a')\n      .contains('Register')\n      .get('a')\n      .contains('Log In')\n      .get('a')\n      .contains('Swagger')\n      .get('a')\n      .contains('Users')\n      .get('.notification.is-warning')\n      .contains('Please log in to submit an exercise.')\n      .get('.notification.is-success')\n      .should('not.be.visible')\n  })\n\n  // new\n  it('should display the page correctly if a user is logged in`', () => {\n    cy.server()\n    cy.route('POST', 'auth/register').as('createUser')\n\n    // register user\n    cy.visit('/register')\n      .get('input[name=\"username\"]')\n      .type(username)\n      .get('input[name=\"email\"]')\n      .type(email)\n      .get('input[name=\"password\"]')\n      .type(password)\n      .get('input[type=\"submit\"]')\n      .click()\n      .wait('@createUser')\n\n    // assert '/' is displayed properly\n    cy.get('h1')\n      .contains('Exercises')\n      .get('.navbar-burger')\n      .click()\n      .get('a')\n      .contains('User Status')\n      .get('a')\n      .contains('Log Out')\n      .get('a')\n      .contains('Register')\n      .should('not.be.visible')\n      .get('a')\n      .contains('Log In')\n      .should('not.be.visible')\n      .get('a')\n      .contains('Swagger')\n      .get('a')\n      .contains('Users')\n      .get('button')\n      .contains('Run Code')\n      .get('.notification.is-warning')\n      .should('not.be.visible')\n      .get('.notification.is-success')\n      .should('not.be.visible')\n  })\n})\n"]}