7d5c91b9b4385d40d7de1746f597a231
const randomstring = require('randomstring');

const username = randomstring.generate();
const email = `${username}@test.com`;
const password = 'Cypr3ssT3st!#';
describe('Message', () => {
  it('should display flash messages correctly', () => {
    // register user
    cy.visit('/register').get('input[name="username"]').type(username).get('input[name="email"]').type(email).get('input[name="password"]').type(password).get('input[type="submit"]').click(); // assert flash messages are removed when user clicks the 'x'

    cy.get('.notification.is-success').contains('Welcome!').get('.delete').click().get('.notification.is-success').should('not.be.visible'); // log a user out

    cy.get('.navbar-burger').click();
    cy.contains('Log Out').click(); // attempt to log in

    cy.visit('/login').get('input[name="email"]').type('incorrect@email.com').get('input[name="password"]').type(password).get('input[type="submit"]').click(); // assert correct message is flashed

    cy.get('.notification.is-success').should('not.be.visible').get('.notification.is-danger').contains('User does not exist.'); // log a user in

    cy.get('input[name="email"]').clear().type(email).get('input[name="password"]').clear().type(password).get('input[type="submit"]').click().wait(100); // assert flash message is removed when a new message is flashed

    cy.get('.notification.is-success').contains('Welcome!').get('.notification.is-danger').should('not.be.visible'); // log a user out

    cy.get('.navbar-burger').click();
    cy.contains('Log Out').click(); // log a user in

    cy.contains('Log In').click().get('input[name="email"]').type(email).get('input[name="password"]').type(password).get('input[type="submit"]').click().wait(100); // assert flash message is removed after three seconds

    cy.get('.notification.is-success').contains('Welcome!').wait(4000).get('.notification.is-success').should('not.be.visible');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc3NhZ2Uuc3BlYy5qcyJdLCJuYW1lcyI6WyJyYW5kb21zdHJpbmciLCJyZXF1aXJlIiwidXNlcm5hbWUiLCJnZW5lcmF0ZSIsImVtYWlsIiwicGFzc3dvcmQiLCJkZXNjcmliZSIsIml0IiwiY3kiLCJ2aXNpdCIsImdldCIsInR5cGUiLCJjbGljayIsImNvbnRhaW5zIiwic2hvdWxkIiwiY2xlYXIiLCJ3YWl0Il0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQTVCOztBQUVBLE1BQU1DLFFBQVEsR0FBR0YsWUFBWSxDQUFDRyxRQUFiLEVBQWpCO0FBQ0EsTUFBTUMsS0FBSyxHQUFJLEdBQUVGLFFBQVMsV0FBMUI7QUFDQSxNQUFNRyxRQUFRLEdBQUcsZUFBakI7QUFFQUMsUUFBUSxDQUFDLFNBQUQsRUFBWSxNQUFNO0FBQ3hCQyxFQUFBQSxFQUFFLENBQUMseUNBQUQsRUFBNEMsTUFBTTtBQUNsRDtBQUNBQyxJQUFBQSxFQUFFLENBQUNDLEtBQUgsQ0FBUyxXQUFULEVBQ0dDLEdBREgsQ0FDTyx3QkFEUCxFQUVHQyxJQUZILENBRVFULFFBRlIsRUFHR1EsR0FISCxDQUdPLHFCQUhQLEVBSUdDLElBSkgsQ0FJUVAsS0FKUixFQUtHTSxHQUxILENBS08sd0JBTFAsRUFNR0MsSUFOSCxDQU1RTixRQU5SLEVBT0dLLEdBUEgsQ0FPTyxzQkFQUCxFQVFHRSxLQVJILEdBRmtELENBWWxEOztBQUNBSixJQUFBQSxFQUFFLENBQUNFLEdBQUgsQ0FBTywwQkFBUCxFQUNHRyxRQURILENBQ1ksVUFEWixFQUVHSCxHQUZILENBRU8sU0FGUCxFQUdHRSxLQUhILEdBSUdGLEdBSkgsQ0FJTywwQkFKUCxFQUtHSSxNQUxILENBS1UsZ0JBTFYsRUFia0QsQ0FvQmxEOztBQUNBTixJQUFBQSxFQUFFLENBQUNFLEdBQUgsQ0FBTyxnQkFBUCxFQUF5QkUsS0FBekI7QUFDQUosSUFBQUEsRUFBRSxDQUFDSyxRQUFILENBQVksU0FBWixFQUF1QkQsS0FBdkIsR0F0QmtELENBd0JsRDs7QUFDQUosSUFBQUEsRUFBRSxDQUFDQyxLQUFILENBQVMsUUFBVCxFQUNHQyxHQURILENBQ08scUJBRFAsRUFFR0MsSUFGSCxDQUVRLHFCQUZSLEVBR0dELEdBSEgsQ0FHTyx3QkFIUCxFQUlHQyxJQUpILENBSVFOLFFBSlIsRUFLR0ssR0FMSCxDQUtPLHNCQUxQLEVBTUdFLEtBTkgsR0F6QmtELENBaUNsRDs7QUFDQUosSUFBQUEsRUFBRSxDQUFDRSxHQUFILENBQU8sMEJBQVAsRUFDR0ksTUFESCxDQUNVLGdCQURWLEVBRUdKLEdBRkgsQ0FFTyx5QkFGUCxFQUdHRyxRQUhILENBR1ksc0JBSFosRUFsQ2tELENBdUNsRDs7QUFDQUwsSUFBQUEsRUFBRSxDQUFDRSxHQUFILENBQU8scUJBQVAsRUFDR0ssS0FESCxHQUVHSixJQUZILENBRVFQLEtBRlIsRUFHR00sR0FISCxDQUdPLHdCQUhQLEVBSUdLLEtBSkgsR0FLR0osSUFMSCxDQUtRTixRQUxSLEVBTUdLLEdBTkgsQ0FNTyxzQkFOUCxFQU9HRSxLQVBILEdBUUdJLElBUkgsQ0FRUSxHQVJSLEVBeENrRCxDQWtEbEQ7O0FBQ0FSLElBQUFBLEVBQUUsQ0FBQ0UsR0FBSCxDQUFPLDBCQUFQLEVBQ0dHLFFBREgsQ0FDWSxVQURaLEVBRUdILEdBRkgsQ0FFTyx5QkFGUCxFQUdHSSxNQUhILENBR1UsZ0JBSFYsRUFuRGtELENBd0RsRDs7QUFDQU4sSUFBQUEsRUFBRSxDQUFDRSxHQUFILENBQU8sZ0JBQVAsRUFBeUJFLEtBQXpCO0FBQ0FKLElBQUFBLEVBQUUsQ0FBQ0ssUUFBSCxDQUFZLFNBQVosRUFBdUJELEtBQXZCLEdBMURrRCxDQTREbEQ7O0FBQ0FKLElBQUFBLEVBQUUsQ0FBQ0ssUUFBSCxDQUFZLFFBQVosRUFDR0QsS0FESCxHQUVHRixHQUZILENBRU8scUJBRlAsRUFHR0MsSUFISCxDQUdRUCxLQUhSLEVBSUdNLEdBSkgsQ0FJTyx3QkFKUCxFQUtHQyxJQUxILENBS1FOLFFBTFIsRUFNR0ssR0FOSCxDQU1PLHNCQU5QLEVBT0dFLEtBUEgsR0FRR0ksSUFSSCxDQVFRLEdBUlIsRUE3RGtELENBdUVsRDs7QUFDQVIsSUFBQUEsRUFBRSxDQUFDRSxHQUFILENBQU8sMEJBQVAsRUFDR0csUUFESCxDQUNZLFVBRFosRUFFR0csSUFGSCxDQUVRLElBRlIsRUFHR04sR0FISCxDQUdPLDBCQUhQLEVBSUdJLE1BSkgsQ0FJVSxnQkFKVjtBQUtELEdBN0VDLENBQUY7QUE4RUQsQ0EvRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJhbmRvbXN0cmluZyA9IHJlcXVpcmUoJ3JhbmRvbXN0cmluZycpXG5cbmNvbnN0IHVzZXJuYW1lID0gcmFuZG9tc3RyaW5nLmdlbmVyYXRlKClcbmNvbnN0IGVtYWlsID0gYCR7dXNlcm5hbWV9QHRlc3QuY29tYFxuY29uc3QgcGFzc3dvcmQgPSAnQ3lwcjNzc1Qzc3QhIydcblxuZGVzY3JpYmUoJ01lc3NhZ2UnLCAoKSA9PiB7XG4gIGl0KCdzaG91bGQgZGlzcGxheSBmbGFzaCBtZXNzYWdlcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgLy8gcmVnaXN0ZXIgdXNlclxuICAgIGN5LnZpc2l0KCcvcmVnaXN0ZXInKVxuICAgICAgLmdldCgnaW5wdXRbbmFtZT1cInVzZXJuYW1lXCJdJylcbiAgICAgIC50eXBlKHVzZXJuYW1lKVxuICAgICAgLmdldCgnaW5wdXRbbmFtZT1cImVtYWlsXCJdJylcbiAgICAgIC50eXBlKGVtYWlsKVxuICAgICAgLmdldCgnaW5wdXRbbmFtZT1cInBhc3N3b3JkXCJdJylcbiAgICAgIC50eXBlKHBhc3N3b3JkKVxuICAgICAgLmdldCgnaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpXG4gICAgICAuY2xpY2soKVxuXG4gICAgLy8gYXNzZXJ0IGZsYXNoIG1lc3NhZ2VzIGFyZSByZW1vdmVkIHdoZW4gdXNlciBjbGlja3MgdGhlICd4J1xuICAgIGN5LmdldCgnLm5vdGlmaWNhdGlvbi5pcy1zdWNjZXNzJylcbiAgICAgIC5jb250YWlucygnV2VsY29tZSEnKVxuICAgICAgLmdldCgnLmRlbGV0ZScpXG4gICAgICAuY2xpY2soKVxuICAgICAgLmdldCgnLm5vdGlmaWNhdGlvbi5pcy1zdWNjZXNzJylcbiAgICAgIC5zaG91bGQoJ25vdC5iZS52aXNpYmxlJylcblxuICAgIC8vIGxvZyBhIHVzZXIgb3V0XG4gICAgY3kuZ2V0KCcubmF2YmFyLWJ1cmdlcicpLmNsaWNrKClcbiAgICBjeS5jb250YWlucygnTG9nIE91dCcpLmNsaWNrKClcblxuICAgIC8vIGF0dGVtcHQgdG8gbG9nIGluXG4gICAgY3kudmlzaXQoJy9sb2dpbicpXG4gICAgICAuZ2V0KCdpbnB1dFtuYW1lPVwiZW1haWxcIl0nKVxuICAgICAgLnR5cGUoJ2luY29ycmVjdEBlbWFpbC5jb20nKVxuICAgICAgLmdldCgnaW5wdXRbbmFtZT1cInBhc3N3b3JkXCJdJylcbiAgICAgIC50eXBlKHBhc3N3b3JkKVxuICAgICAgLmdldCgnaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpXG4gICAgICAuY2xpY2soKVxuXG4gICAgLy8gYXNzZXJ0IGNvcnJlY3QgbWVzc2FnZSBpcyBmbGFzaGVkXG4gICAgY3kuZ2V0KCcubm90aWZpY2F0aW9uLmlzLXN1Y2Nlc3MnKVxuICAgICAgLnNob3VsZCgnbm90LmJlLnZpc2libGUnKVxuICAgICAgLmdldCgnLm5vdGlmaWNhdGlvbi5pcy1kYW5nZXInKVxuICAgICAgLmNvbnRhaW5zKCdVc2VyIGRvZXMgbm90IGV4aXN0LicpXG5cbiAgICAvLyBsb2cgYSB1c2VyIGluXG4gICAgY3kuZ2V0KCdpbnB1dFtuYW1lPVwiZW1haWxcIl0nKVxuICAgICAgLmNsZWFyKClcbiAgICAgIC50eXBlKGVtYWlsKVxuICAgICAgLmdldCgnaW5wdXRbbmFtZT1cInBhc3N3b3JkXCJdJylcbiAgICAgIC5jbGVhcigpXG4gICAgICAudHlwZShwYXNzd29yZClcbiAgICAgIC5nZXQoJ2lucHV0W3R5cGU9XCJzdWJtaXRcIl0nKVxuICAgICAgLmNsaWNrKClcbiAgICAgIC53YWl0KDEwMClcblxuICAgIC8vIGFzc2VydCBmbGFzaCBtZXNzYWdlIGlzIHJlbW92ZWQgd2hlbiBhIG5ldyBtZXNzYWdlIGlzIGZsYXNoZWRcbiAgICBjeS5nZXQoJy5ub3RpZmljYXRpb24uaXMtc3VjY2VzcycpXG4gICAgICAuY29udGFpbnMoJ1dlbGNvbWUhJylcbiAgICAgIC5nZXQoJy5ub3RpZmljYXRpb24uaXMtZGFuZ2VyJylcbiAgICAgIC5zaG91bGQoJ25vdC5iZS52aXNpYmxlJylcblxuICAgIC8vIGxvZyBhIHVzZXIgb3V0XG4gICAgY3kuZ2V0KCcubmF2YmFyLWJ1cmdlcicpLmNsaWNrKClcbiAgICBjeS5jb250YWlucygnTG9nIE91dCcpLmNsaWNrKClcblxuICAgIC8vIGxvZyBhIHVzZXIgaW5cbiAgICBjeS5jb250YWlucygnTG9nIEluJylcbiAgICAgIC5jbGljaygpXG4gICAgICAuZ2V0KCdpbnB1dFtuYW1lPVwiZW1haWxcIl0nKVxuICAgICAgLnR5cGUoZW1haWwpXG4gICAgICAuZ2V0KCdpbnB1dFtuYW1lPVwicGFzc3dvcmRcIl0nKVxuICAgICAgLnR5cGUocGFzc3dvcmQpXG4gICAgICAuZ2V0KCdpbnB1dFt0eXBlPVwic3VibWl0XCJdJylcbiAgICAgIC5jbGljaygpXG4gICAgICAud2FpdCgxMDApXG5cbiAgICAvLyBhc3NlcnQgZmxhc2ggbWVzc2FnZSBpcyByZW1vdmVkIGFmdGVyIHRocmVlIHNlY29uZHNcbiAgICBjeS5nZXQoJy5ub3RpZmljYXRpb24uaXMtc3VjY2VzcycpXG4gICAgICAuY29udGFpbnMoJ1dlbGNvbWUhJylcbiAgICAgIC53YWl0KDQwMDApXG4gICAgICAuZ2V0KCcubm90aWZpY2F0aW9uLmlzLXN1Y2Nlc3MnKVxuICAgICAgLnNob3VsZCgnbm90LmJlLnZpc2libGUnKVxuICB9KVxufSlcbiJdfQ==