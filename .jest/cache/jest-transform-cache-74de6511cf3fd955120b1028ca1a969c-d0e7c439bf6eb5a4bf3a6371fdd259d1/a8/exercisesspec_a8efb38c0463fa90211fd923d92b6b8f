b29b613de1db15a980f9a84167fbf9c7
const randomstring = require('randomstring');

const username = randomstring.generate();
const email = `${username}@test.com`;
const password = 'greaterthanten';
describe('Exercises', () => {
  it('should display the exercises correctly if a user is not logged in', () => {
    cy.visit('/').get('h1').contains('Exercises').get('.notification.is-warning').contains('Please log in to submit an exercise.').get('button').should('not.be.visible');
  });
  it('should allow a user to submit an exercise if logged in', () => {
    cy.server();
    cy.route('POST', 'auth/register').as('createUser');
    cy.route('POST', Cypress.env('REACT_APP_API_GATEWAY_URL')).as('gradeExercise'); // register a new user

    cy.visit('/register').get('input[name="username"]').type(username).get('input[name="email"]').type(email).get('input[name="password"]').type(password).get('input[type="submit"]').click().wait('@createUser'); // assert exercises are displayed correctly

    cy.get('h1').contains('Exercises').get('.notification.is-success').contains('Welcome!').get('.notification.is-danger').should('not.be.visible').get('button.button.is-primary').contains('Run Code'); // assert user can submit an exercise

    cy.get('button').contains('Run Code').click().wait(600).get('h5 > .grade-text').contains('Incorrect!');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4ZXJjaXNlcy5zcGVjLmpzIl0sIm5hbWVzIjpbInJhbmRvbXN0cmluZyIsInJlcXVpcmUiLCJ1c2VybmFtZSIsImdlbmVyYXRlIiwiZW1haWwiLCJwYXNzd29yZCIsImRlc2NyaWJlIiwiaXQiLCJjeSIsInZpc2l0IiwiZ2V0IiwiY29udGFpbnMiLCJzaG91bGQiLCJzZXJ2ZXIiLCJyb3V0ZSIsImFzIiwiQ3lwcmVzcyIsImVudiIsInR5cGUiLCJjbGljayIsIndhaXQiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFlBQVksR0FBR0MsT0FBTyxDQUFDLGNBQUQsQ0FBNUI7O0FBRUEsTUFBTUMsUUFBUSxHQUFHRixZQUFZLENBQUNHLFFBQWIsRUFBakI7QUFDQSxNQUFNQyxLQUFLLEdBQUksR0FBRUYsUUFBUyxXQUExQjtBQUNBLE1BQU1HLFFBQVEsR0FBRyxnQkFBakI7QUFHQUMsUUFBUSxDQUFDLFdBQUQsRUFBYyxNQUFNO0FBQzFCQyxFQUFBQSxFQUFFLENBQUMsbUVBQUQsRUFBc0UsTUFBTTtBQUM1RUMsSUFBQUEsRUFBRSxDQUNDQyxLQURILENBQ1MsR0FEVCxFQUVHQyxHQUZILENBRU8sSUFGUCxFQUVhQyxRQUZiLENBRXNCLFdBRnRCLEVBR0dELEdBSEgsQ0FHTywwQkFIUCxFQUdtQ0MsUUFIbkMsQ0FHNEMsc0NBSDVDLEVBSUdELEdBSkgsQ0FJTyxRQUpQLEVBSWlCRSxNQUpqQixDQUl3QixnQkFKeEI7QUFLRCxHQU5DLENBQUY7QUFRQUwsRUFBQUEsRUFBRSxDQUFDLHdEQUFELEVBQTJELE1BQU07QUFDakVDLElBQUFBLEVBQUUsQ0FBQ0ssTUFBSDtBQUNBTCxJQUFBQSxFQUFFLENBQUNNLEtBQUgsQ0FBUyxNQUFULEVBQWlCLGVBQWpCLEVBQWtDQyxFQUFsQyxDQUFxQyxZQUFyQztBQUNBUCxJQUFBQSxFQUFFLENBQUNNLEtBQUgsQ0FBUyxNQUFULEVBQWlCRSxPQUFPLENBQUNDLEdBQVIsQ0FBWSwyQkFBWixDQUFqQixFQUEyREYsRUFBM0QsQ0FBOEQsZUFBOUQsRUFIaUUsQ0FLakU7O0FBQ0FQLElBQUFBLEVBQUUsQ0FDQ0MsS0FESCxDQUNTLFdBRFQsRUFFR0MsR0FGSCxDQUVPLHdCQUZQLEVBRWlDUSxJQUZqQyxDQUVzQ2hCLFFBRnRDLEVBR0dRLEdBSEgsQ0FHTyxxQkFIUCxFQUc4QlEsSUFIOUIsQ0FHbUNkLEtBSG5DLEVBSUdNLEdBSkgsQ0FJTyx3QkFKUCxFQUlpQ1EsSUFKakMsQ0FJc0NiLFFBSnRDLEVBS0dLLEdBTEgsQ0FLTyxzQkFMUCxFQUsrQlMsS0FML0IsR0FNR0MsSUFOSCxDQU1RLGFBTlIsRUFOaUUsQ0FjakU7O0FBQ0FaLElBQUFBLEVBQUUsQ0FDQ0UsR0FESCxDQUNPLElBRFAsRUFDYUMsUUFEYixDQUNzQixXQUR0QixFQUVHRCxHQUZILENBRU8sMEJBRlAsRUFFbUNDLFFBRm5DLENBRTRDLFVBRjVDLEVBR0dELEdBSEgsQ0FHTyx5QkFIUCxFQUdrQ0UsTUFIbEMsQ0FHeUMsZ0JBSHpDLEVBSUdGLEdBSkgsQ0FJTywwQkFKUCxFQUltQ0MsUUFKbkMsQ0FJNEMsVUFKNUMsRUFmaUUsQ0FxQmpFOztBQUNBSCxJQUFBQSxFQUFFLENBQ0NFLEdBREgsQ0FDTyxRQURQLEVBQ2lCQyxRQURqQixDQUMwQixVQUQxQixFQUNzQ1EsS0FEdEMsR0FFR0MsSUFGSCxDQUVRLEdBRlIsRUFHR1YsR0FISCxDQUdPLGtCQUhQLEVBRzJCQyxRQUgzQixDQUdvQyxZQUhwQztBQUlELEdBMUJDLENBQUY7QUEyQkQsQ0FwQ08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJhbmRvbXN0cmluZyA9IHJlcXVpcmUoJ3JhbmRvbXN0cmluZycpO1xuXG5jb25zdCB1c2VybmFtZSA9IHJhbmRvbXN0cmluZy5nZW5lcmF0ZSgpO1xuY29uc3QgZW1haWwgPSBgJHt1c2VybmFtZX1AdGVzdC5jb21gO1xuY29uc3QgcGFzc3dvcmQgPSAnZ3JlYXRlcnRoYW50ZW4nXG5cblxuZGVzY3JpYmUoJ0V4ZXJjaXNlcycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBkaXNwbGF5IHRoZSBleGVyY2lzZXMgY29ycmVjdGx5IGlmIGEgdXNlciBpcyBub3QgbG9nZ2VkIGluJywgKCkgPT4ge1xuICAgIGN5XG4gICAgICAudmlzaXQoJy8nKVxuICAgICAgLmdldCgnaDEnKS5jb250YWlucygnRXhlcmNpc2VzJylcbiAgICAgIC5nZXQoJy5ub3RpZmljYXRpb24uaXMtd2FybmluZycpLmNvbnRhaW5zKCdQbGVhc2UgbG9nIGluIHRvIHN1Ym1pdCBhbiBleGVyY2lzZS4nKVxuICAgICAgLmdldCgnYnV0dG9uJykuc2hvdWxkKCdub3QuYmUudmlzaWJsZScpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGFsbG93IGEgdXNlciB0byBzdWJtaXQgYW4gZXhlcmNpc2UgaWYgbG9nZ2VkIGluJywgKCkgPT4ge1xuICAgIGN5LnNlcnZlcigpO1xuICAgIGN5LnJvdXRlKCdQT1NUJywgJ2F1dGgvcmVnaXN0ZXInKS5hcygnY3JlYXRlVXNlcicpO1xuICAgIGN5LnJvdXRlKCdQT1NUJywgQ3lwcmVzcy5lbnYoJ1JFQUNUX0FQUF9BUElfR0FURVdBWV9VUkwnKSkuYXMoJ2dyYWRlRXhlcmNpc2UnKTtcblxuICAgIC8vIHJlZ2lzdGVyIGEgbmV3IHVzZXJcbiAgICBjeVxuICAgICAgLnZpc2l0KCcvcmVnaXN0ZXInKVxuICAgICAgLmdldCgnaW5wdXRbbmFtZT1cInVzZXJuYW1lXCJdJykudHlwZSh1c2VybmFtZSlcbiAgICAgIC5nZXQoJ2lucHV0W25hbWU9XCJlbWFpbFwiXScpLnR5cGUoZW1haWwpXG4gICAgICAuZ2V0KCdpbnB1dFtuYW1lPVwicGFzc3dvcmRcIl0nKS50eXBlKHBhc3N3b3JkKVxuICAgICAgLmdldCgnaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpLmNsaWNrKClcbiAgICAgIC53YWl0KCdAY3JlYXRlVXNlcicpO1xuXG4gICAgLy8gYXNzZXJ0IGV4ZXJjaXNlcyBhcmUgZGlzcGxheWVkIGNvcnJlY3RseVxuICAgIGN5XG4gICAgICAuZ2V0KCdoMScpLmNvbnRhaW5zKCdFeGVyY2lzZXMnKVxuICAgICAgLmdldCgnLm5vdGlmaWNhdGlvbi5pcy1zdWNjZXNzJykuY29udGFpbnMoJ1dlbGNvbWUhJylcbiAgICAgIC5nZXQoJy5ub3RpZmljYXRpb24uaXMtZGFuZ2VyJykuc2hvdWxkKCdub3QuYmUudmlzaWJsZScpXG4gICAgICAuZ2V0KCdidXR0b24uYnV0dG9uLmlzLXByaW1hcnknKS5jb250YWlucygnUnVuIENvZGUnKTtcblxuICAgIC8vIGFzc2VydCB1c2VyIGNhbiBzdWJtaXQgYW4gZXhlcmNpc2VcbiAgICBjeVxuICAgICAgLmdldCgnYnV0dG9uJykuY29udGFpbnMoJ1J1biBDb2RlJykuY2xpY2soKVxuICAgICAgLndhaXQoNjAwKVxuICAgICAgLmdldCgnaDUgPiAuZ3JhZGUtdGV4dCcpLmNvbnRhaW5zKCdJbmNvcnJlY3QhJyk7XG4gIH0pXG59KVxuIl19