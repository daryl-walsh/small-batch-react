"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const front_matter_1 = tslib_1.__importDefault(require("front-matter"));
const fs = tslib_1.__importStar(require("fs"));
const globby_1 = tslib_1.__importDefault(require("globby"));
const marked = tslib_1.__importStar(require("marked"));
const path = tslib_1.__importStar(require("path"));
class Reader {
    constructor(dir) {
        this.dir = dir;
    }
    readAll() {
        return this.list().map((filename) => this.read(filename));
    }
    read(filename) {
        const template = path.resolve(this.dir, filename);
        const markdown = fs.readFileSync(template, { encoding: 'utf8' });
        const { attributes, body } = front_matter_1.default(markdown);
        const resources = this.collect(marked.lexer(body));
        return {
            path: template,
            attributes: Object.assign({ extends: '', name: '', description: '', message: '', root: '', output: '', ignore: [], hooks: [] }, attributes),
            resources,
        };
    }
    list() {
        return globby_1.default.sync(`${path.join(this.dir, '*.md')}`, { onlyFiles: true }).map((file) => path.basename(file));
    }
    collect(tokens) {
        const resources = [];
        let filename = null;
        for (const token of tokens) {
            switch (token.type) {
                case 'heading':
                    if (token.depth === 1) {
                        filename = token.text.trim().replace(/^`|`$/g, '');
                    }
                    break;
                case 'code':
                    if (filename != null) {
                        resources.push({
                            filename,
                            content: token.text,
                        });
                        filename = null;
                    }
                    break;
            }
        }
        return resources;
    }
}
exports.Reader = Reader;
//# sourceMappingURL=reader.js.map