export declare enum TokenType {
    ILLEGAL = 0,
    EOF = 1,
    NULL = 2,
    UNDEFINED = 3,
    BOOLEAN = 4,
    STRING = 5,
    NUMBER = 6,
    IDENT = 7,
    PIPE = 8,
    OPEN_TAG = 9,
    CLOSE_TAG = 10
}
export declare type TokenMap = {
    [TokenType.ILLEGAL]: null;
    [TokenType.EOF]: null;
    [TokenType.NULL]: null;
    [TokenType.UNDEFINED]: undefined;
    [TokenType.BOOLEAN]: boolean;
    [TokenType.STRING]: string;
    [TokenType.NUMBER]: number;
    [TokenType.IDENT]: string;
    [TokenType.PIPE]: string;
    [TokenType.OPEN_TAG]: string;
    [TokenType.CLOSE_TAG]: string;
};
export declare type Token<T extends keyof TokenMap> = {
    type: T;
    literal: TokenMap[T];
};
export declare type AnyToken = Token<TokenType.ILLEGAL> | Token<TokenType.EOF> | Token<TokenType.NULL> | Token<TokenType.UNDEFINED> | Token<TokenType.BOOLEAN> | Token<TokenType.STRING> | Token<TokenType.NUMBER> | Token<TokenType.IDENT> | Token<TokenType.PIPE> | Token<TokenType.OPEN_TAG> | Token<TokenType.CLOSE_TAG>;
export declare function createToken<T extends keyof TokenMap>(type: T, literal: TokenMap[T]): {
    type: T;
    literal: TokenMap[T];
};
//# sourceMappingURL=tokens.d.ts.map