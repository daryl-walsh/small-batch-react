"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = tslib_1.__importDefault(require("ava"));
const parser_1 = require("./parser");
const tokenize_1 = require("./tokenize");
const parse = (input) => {
    const parser = new parser_1.Parser(tokenize_1.tokenize(input));
    const ast = parser.parse();
    return ast.map((node) => node.toString()).join('');
};
const valid = (t, input, expected) => {
    t.is(parse(input), expected);
};
ava_1.default('raw', valid, 'foo/bar.ts', 'foo/bar.ts');
ava_1.default('null', valid, '{{ null }}', '{{ null }}');
ava_1.default('undefined', valid, '{{ undefined }}', '{{ undefined }}');
ava_1.default('true', valid, '{{ true }}', '{{ true }}');
ava_1.default('false', valid, '{{ false }}', '{{ false }}');
ava_1.default('string', valid, '{{ "str" }}', '{{ "str" }}');
ava_1.default('number', valid, '{{ 123 }}', '{{ 123 }}');
ava_1.default('identifier', valid, '{{ identifier }}', '{{ identifier }}');
ava_1.default('call - null', valid, '{{ fn null}}', '{{ fn(null) }}');
ava_1.default('call - undefined', valid, '{{ fn undefined}}', '{{ fn(undefined) }}');
ava_1.default('call - true', valid, '{{ fn true}}', '{{ fn(true) }}');
ava_1.default('call - false', valid, '{{ fn false}}', '{{ fn(false) }}');
ava_1.default('call - string', valid, '{{ fn "str" }}', '{{ fn("str") }}');
ava_1.default('call - number', valid, '{{ fn 123}}', '{{ fn(123) }}');
ava_1.default('call - identifier', valid, '{{ fn input }}', '{{ fn(input) }}');
ava_1.default('call - multiple arguments', valid, '{{ fn 123 "string" null input }}', '{{ fn(123, "string", null, input) }}');
ava_1.default('pipe call - 0 arguments', valid, '{{ identifier | fn }}', '{{ fn(identifier) }}');
ava_1.default('pipe call - 1 arguments', valid, '{{ identifier | fn "str" }}', '{{ fn(identifier, "str") }}');
ava_1.default('pipe call - 2 arguments', valid, '{{ identifier | fn1 | fn2 "str" }}', '{{ fn2(fn1(identifier), "str") }}');
ava_1.default('pipe call - 3 arguments', valid, '{{ identifier | fn1 | fn2 "str" | fn3 123 }}', '{{ fn3(fn2(fn1(identifier), "str"), 123) }}');
ava_1.default('complex', valid, 'path/{{fn 1 2 3}}{{foo}}/{{ key | fn1 5 | fn2 "../" }}.ts', 'path/{{ fn(1, 2, 3) }}{{ foo }}/{{ fn2(fn1(key, 5), "../") }}.ts');
//# sourceMappingURL=parser.test.js.map