"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = tslib_1.__importDefault(require("ava"));
const compiler_1 = require("./compiler");
const parser_1 = require("./parser");
const tokenize_1 = require("./tokenize");
const valid = (t, input, vars, funcs, expected) => {
    const parser = new parser_1.Parser(tokenize_1.tokenize(input));
    const compiler = new compiler_1.Compiler({
        document: { path: '', attributes: {}, resources: [] },
        vars: new Map(vars),
        funcs: new Map(funcs),
    });
    const output = compiler.compile(parser.parse());
    t.is(output, expected);
};
const invalid = (t, input, vars, funcs) => {
    const parser = new parser_1.Parser(tokenize_1.tokenize(input));
    const compiler = new compiler_1.Compiler({
        document: { path: '', attributes: {}, resources: [] },
        vars: new Map(vars),
        funcs: new Map(funcs),
    });
    t.throws(() => {
        compiler.compile(parser.parse());
    });
};
ava_1.default('raw', valid, 'foo bar baz', [], [], 'foo bar baz');
ava_1.default('null', valid, '{{ null }}', [], [], '');
ava_1.default('undefined', valid, '{{ undefined }}', [], [], '');
ava_1.default('true', valid, '{{ true }}', [], [], '');
ava_1.default('false', valid, '{{ false }}', [], [], '');
ava_1.default('string', valid, '{{ "string" }}', [], [], 'string');
ava_1.default('number', valid, '{{ 123 }}', [], [], '123');
ava_1.default('identifier - variables', valid, '{{key}}', [['key', 'value']], [], 'value');
ava_1.default('identifier - function', valid, '{{key}}', [], [['key', () => 'result']], 'result');
ava_1.default('identifier - identifier (invalid)', invalid, '{{key1 | key2}}', [['key1', 'key1'], ['key2', 'key2']], []);
ava_1.default('function - string', valid, '{{ fn "arg" }}', [], [['fn', (_, arg) => `result=${arg}`]], 'result=arg');
ava_1.default('function - number', valid, '{{ fn 123 }}', [], [['fn', (_, arg) => `result=${arg}`]], 'result=123');
ava_1.default('function - identifier', valid, '{{ fn input }}', [['input', 'ident']], [['fn', (_, arg) => `result=${arg}`]], 'result=ident');
ava_1.default('pipe call - 0 argument', valid, '{{ key | upper }}', [['key', 'value']], [['upper', (_, value) => value.toUpperCase()]], 'VALUE');
ava_1.default('pipe call - 1 argument', valid, '{{ key | join "arg" }}', [['key', 'value']], [['join', (_, ...args) => args.join(', ')]], 'value, arg');
ava_1.default('pipe call - 1 argument x identifier', valid, '{{ key1 | join "arg" key2 }}', [['key1', 'value1'], ['key2', 'value2']], [['join', (_, ...args) => args.join(', ')]], 'value1, arg, value2');
ava_1.default('pipe call - chain function', valid, '{{ key | fn1 | fn2 "fn2-arg" | fn3 123 }}', [['key', 'value']], [
    ['fn1', (_, v) => `fn1(${v})`],
    ['fn2', (_, s, v) => `fn2(${s}, ${v})`],
    ['fn3', (_, n, v) => `fn3(${n}, ${v})`],
], 'fn3(fn2(fn1(value), fn2-arg), 123)');
ava_1.default('pipe call - 0 argument function to function chain', valid, '{{ fn1 | fn2 }}', [], [['fn1', () => `fn1()`], ['fn2', (_, v) => `fn2(${v})`]], 'fn2(fn1())');
ava_1.default('pipe call - 1 argument function to function chain', valid, '{{ fn1 "arg1" | fn2 }}', [], [['fn1', (_, s) => `fn1(${s})`], ['fn2', (_, v) => `fn2(${v})`]], 'fn2(fn1(arg1))');
//# sourceMappingURL=compiler.test.js.map