"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = tslib_1.__importDefault(require("ava"));
const tokenize_1 = require("./tokenize");
const tokens_1 = require("./tokens");
const valid = (t, input, expected) => {
    t.deepEqual(tokenize_1.tokenize(input), expected);
};
const invalid = (t, input) => {
    t.throws(() => {
        tokenize_1.tokenize(input);
    });
};
ava_1.default('raw - true', valid, 'true', [tokens_1.createToken(tokens_1.TokenType.STRING, 'true')]);
ava_1.default('raw - false', valid, 'false', [tokens_1.createToken(tokens_1.TokenType.STRING, 'false')]);
ava_1.default('raw - null', valid, 'null', [tokens_1.createToken(tokens_1.TokenType.STRING, 'null')]);
ava_1.default('raw - undefined', valid, 'undefined', [tokens_1.createToken(tokens_1.TokenType.STRING, 'undefined')]);
ava_1.default('raw - string', valid, 'foo', [tokens_1.createToken(tokens_1.TokenType.STRING, 'foo')]);
ava_1.default('raw - numeric', valid, '123', [tokens_1.createToken(tokens_1.TokenType.STRING, '123')]);
ava_1.default('raw - incomplete open tag', valid, '{ {', [tokens_1.createToken(tokens_1.TokenType.STRING, '{ {')]);
ava_1.default('raw - incomplete close tag', valid, '} }', [tokens_1.createToken(tokens_1.TokenType.STRING, '} }')]);
ava_1.default('tag - empty', valid, '{{}}', [tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'), tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}')]);
ava_1.default('tag - identifier', valid, '{{ identifier }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.IDENT, 'identifier'),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - pipe', valid, '{{ foo|   bar }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.IDENT, 'foo'),
    tokens_1.createToken(tokens_1.TokenType.PIPE, '|'),
    tokens_1.createToken(tokens_1.TokenType.IDENT, 'bar'),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - true', valid, '{{true}}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.BOOLEAN, true),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - false', valid, '{{  false}}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.BOOLEAN, false),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - null', valid, '{{ null }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.NULL, null),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - undefined', valid, '{{undefined }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.UNDEFINED, undefined),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - string (single quote)', valid, "{{ 'string'}}", [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.STRING, 'string'),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - string (double quote)', valid, '{{ "string"}}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.STRING, 'string'),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - number (natural)', valid, '{{ 123 }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.NUMBER, 123),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - number (float)', valid, '{{ 123.456}}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.NUMBER, 123.456),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - number (positive)', valid, '{{ +123 }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.NUMBER, 123),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - number (negative)', valid, '{{ -123 }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.NUMBER, -123),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - number (negative float)', valid, '{{ -0.12}}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.NUMBER, -0.12),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - number (hex)', valid, '{{ 0xF }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.NUMBER, 15),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
ava_1.default('tag - unclosing', invalid, '{{ foo "bar"');
ava_1.default('tag - unopening', invalid, 'foo bar }}');
ava_1.default('tag - duplicate opening 1', invalid, '{{ {{');
ava_1.default('tag - duplicate opening 2', invalid, '{{ {{ }}');
ava_1.default('complex', valid, '{{ foo | bar "hoge" | 123 | null }}', [
    tokens_1.createToken(tokens_1.TokenType.OPEN_TAG, '{{'),
    tokens_1.createToken(tokens_1.TokenType.IDENT, 'foo'),
    tokens_1.createToken(tokens_1.TokenType.PIPE, '|'),
    tokens_1.createToken(tokens_1.TokenType.IDENT, 'bar'),
    tokens_1.createToken(tokens_1.TokenType.STRING, 'hoge'),
    tokens_1.createToken(tokens_1.TokenType.PIPE, '|'),
    tokens_1.createToken(tokens_1.TokenType.NUMBER, 123),
    tokens_1.createToken(tokens_1.TokenType.PIPE, '|'),
    tokens_1.createToken(tokens_1.TokenType.NULL, null),
    tokens_1.createToken(tokens_1.TokenType.CLOSE_TAG, '}}'),
]);
//# sourceMappingURL=tokenize.test.js.map