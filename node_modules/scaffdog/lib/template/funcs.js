"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const cc = tslib_1.__importStar(require("change-case"));
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const safe_eval_1 = tslib_1.__importDefault(require("safe-eval"));
const utils_1 = require("../utils");
const compiler_1 = require("./compiler");
const context_1 = require("./context");
const funcs = new Map();
exports.funcs = funcs;
funcs.set('camel', (_, v) => cc.camel(v));
funcs.set('snake', (_, v) => cc.snake(v));
funcs.set('pascal', (_, v) => cc.pascal(v));
funcs.set('kebab', (_, v) => cc.param(v));
funcs.set('constant', (_, v) => cc.constant(v));
funcs.set('upper', (_, v) => v.toUpperCase());
funcs.set('lower', (_, v) => v.toLowerCase());
funcs.set('replace', (_, v, pattern, replacement) => v.replace(new RegExp(pattern, 'g'), replacement));
funcs.set('relative', (ctx, to) => {
    const output = ctx.vars.get('output');
    if (output == null) {
        return '';
    }
    return path.relative(path.dirname(output), path.resolve(path.dirname(ctx.document.path), to));
});
funcs.set('read', (ctx, target) => {
    const file = path.join(path.dirname(ctx.document.path), target);
    if (!utils_1.fileExists(file)) {
        throw new Error(`"${file}" does not exists.`);
    }
    const content = fs.readFileSync(file, 'utf8');
    return compiler_1.Compiler.compile(context_1.createContext(Object.assign({}, ctx.document, { path: file }), ctx.vars), content);
});
funcs.set('eval', (ctx, v, code) => {
    const evalCode = code != null ? code : v;
    const context = {};
    for (const [key, value] of ctx.vars.entries()) {
        context[key] = value;
    }
    return safe_eval_1.default(evalCode, context); // tslint:disable-line: no-eval
});
//# sourceMappingURL=funcs.js.map