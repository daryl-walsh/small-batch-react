"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ava_1 = tslib_1.__importDefault(require("ava"));
const fs = tslib_1.__importStar(require("fs"));
const globby_1 = tslib_1.__importDefault(require("globby"));
const mkdirp = tslib_1.__importStar(require("mkdirp"));
const path = tslib_1.__importStar(require("path"));
const rimraf = tslib_1.__importStar(require("rimraf"));
const nixt = require('nixt'); // tslint:disable-line: no-var-requires
const CWD = path.resolve(__dirname, '../..');
const PATH = path.resolve(CWD, 'tmp');
const exec = (input) => nixt()
    .cwd(CWD)
    .run('node ./bin/run generate test')
    .on(/Please select the output/)
    .respond('\n')
    .on(/Please enter any text/)
    .respond(`${input}\n`);
ava_1.default.beforeEach(() => {
    rimraf.sync(PATH);
    mkdirp.sync(PATH);
});
ava_1.default.after(() => {
    rimraf.sync(PATH);
});
ava_1.default.serial('basic', (t) => {
    return new Promise((resolve) => {
        exec('generate command test')
            .code(0)
            .end((err) => {
            t.falsy(err);
            const contents = globby_1.default
                .sync(`${PATH}/**/*`, { onlyFiles: true })
                .map((file) => `${path.relative(CWD, file)}\n${fs.readFileSync(file, 'utf8')}`)
                .join('\n\n');
            t.snapshot(contents);
            resolve();
        });
    });
});
ava_1.default.serial('overwrite', (t) => {
    return new Promise((resolve) => {
        fs.writeFileSync(path.resolve(PATH, 'functions.md'), 'old functions');
        fs.writeFileSync(path.resolve(PATH, 'paths.md'), 'old paths');
        exec('overwrite test')
            .on(/overwrite .*"tmp\/paths\.md"/)
            .respond('y\n')
            .on(/overwrite .*"tmp\/functions\.md"/)
            .respond('n\n')
            .code(0)
            .end((err) => {
            t.falsy(err);
            const contents = globby_1.default
                .sync(`${PATH}/**/*`, { onlyFiles: true })
                .map((file) => `${path.relative(CWD, file)}\n${fs.readFileSync(file, 'utf8')}`)
                .join('\n\n');
            t.snapshot(contents);
            resolve();
        });
    });
});
//# sourceMappingURL=generate.test.js.map