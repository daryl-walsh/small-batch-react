diff a/services/client/src/components/__tests__/Form.test.jsx b/services/client/src/components/__tests__/Form.test.jsx	(rejected hunks)
@@ -1,4 +1,4 @@
-import React from 'react';
-import { shallow } from 'enzyme';
-import renderer from 'react-test-renderer';
-import { MemoryRouter, Switch, Redirect } from 'react-router-dom';
+import React from 'react'
+import { shallow } from 'enzyme'
+import renderer from 'react-test-renderer'
+import { MemoryRouter, Switch, Redirect } from 'react-router-dom'
@@ -6 +6 @@ import { MemoryRouter, Switch, Redirect } from 'react-router-dom';
-import Form from '../Form';
+import Form from '../Form'
@@ -15 +15 @@ const testData = [
-      password: ''
+      password: '',
@@ -26 +26 @@ const testData = [
-      password: ''
+      password: '',
@@ -31 +31 @@ const testData = [
-  }
+  },
@@ -35,2 +35,2 @@ describe('When not authenticated', () => {
-  testData.forEach((el) => {
-    const component = <Form {...el} />;
+  testData.forEach(el => {
+    const component = <Form {...el} />
@@ -38,6 +38,6 @@ describe('When not authenticated', () => {
-      const wrapper = shallow(component);
-      const h1 = wrapper.find('h1');
-      expect(h1.length).toBe(1);
-      expect(h1.get(0).props.children).toBe(el.title);
-      const formGroup = wrapper.find('.field');
-      expect(formGroup.length).toBe(Object.keys(el.formData).length);
+      const wrapper = shallow(component)
+      const h1 = wrapper.find('h1')
+      expect(h1.length).toBe(1)
+      expect(h1.get(0).props.children).toBe(el.title)
+      const formGroup = wrapper.find('.field')
+      expect(formGroup.length).toBe(Object.keys(el.formData).length)
@@ -45,3 +45,4 @@ describe('When not authenticated', () => {
-        Object.keys(el.formData)[0]);
-      expect(formGroup.get(0).props.children.props.value).toBe('');
-    });
+        Object.keys(el.formData)[0]
+      )
+      expect(formGroup.get(0).props.children.props.value).toBe('')
+    })
@@ -49,4 +50,4 @@ describe('When not authenticated', () => {
-      const wrapper = shallow(component);
-      const input = wrapper.find('input[type="email"]');
-      expect(el.handleUserFormSubmit).toHaveBeenCalledTimes(0);
-      expect(el.handleFormChange).toHaveBeenCalledTimes(0);
+      const wrapper = shallow(component)
+      const input = wrapper.find('input[type="email"]')
+      expect(el.handleUserFormSubmit).toHaveBeenCalledTimes(0)
+      expect(el.handleFormChange).toHaveBeenCalledTimes(0)
@@ -54 +55 @@ describe('When not authenticated', () => {
-      expect(el.handleFormChange).toHaveBeenCalledTimes(1);
+      expect(el.handleFormChange).toHaveBeenCalledTimes(1)
@@ -56,3 +57,3 @@ describe('When not authenticated', () => {
-      expect(el.handleUserFormSubmit).toHaveBeenCalledWith(el.formData);
-      expect(el.handleUserFormSubmit).toHaveBeenCalledTimes(1);
-    });
+      expect(el.handleUserFormSubmit).toHaveBeenCalledWith(el.formData)
+      expect(el.handleUserFormSubmit).toHaveBeenCalledTimes(1)
+    })
@@ -60,3 +61,3 @@ describe('When not authenticated', () => {
-      const tree = renderer.create(component).toJSON();
-      expect(tree).toMatchSnapshot();
-    });
+      const tree = renderer.create(component).toJSON()
+      expect(tree).toMatchSnapshot()
+    })
@@ -64 +65 @@ describe('When not authenticated', () => {
-});
+})
@@ -67,6 +68,8 @@ describe('When authenticated', () => {
-  testData.forEach((el) => {
-    const component = <Form
-      formType={el.formType}
-      formData={el.formData}
-      isAuthenticated={true}
-    />;
+  testData.forEach(el => {
+    const component = (
+      <Form
+        formType={el.formType}
+        formData={el.formData}
+        isAuthenticated={true}
+      />
+    )
@@ -74,3 +77,3 @@ describe('When authenticated', () => {
-      const wrapper = shallow(component);
-      expect(wrapper.find('Redirect')).toHaveLength(1);
-    });
+      const wrapper = shallow(component)
+      expect(wrapper.find('Redirect')).toHaveLength(1)
+    })
@@ -78 +81 @@ describe('When authenticated', () => {
-});
+})
